plugins {
    id "fabric-loom"
    id "maven-publish"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
    id "org.jetbrains.changelog"
    id 'com.palantir.git-version'
}

var targetJdk = Integer.parseInt(rootProject.java_compiler_version)

allprojects {
    version = "${project.mod_version}+${versionDetails().gitHash[0..7]}~lonefelidae16"
    group = project.maven_group

    repositories {
        maven {
            name = "stashymane's repo"
            url = "https://repo.stashy.dev"
        }
        maven {
            url = "https://artifactory.kow08absty.com/artifactory/fabricmc"
        }
    }
}

base {
    archivesName = project.archives_base_name
}

var compatibleWith = []

var split = rootProject.minecraft_version.split('\\.')
if (split.length == 3 && !rootProject.minecraft_version.contains("-")) {
    var base = split[0] + "." + split[1]
    compatibleWith.add(base)
    for (int i = Integer.parseInt(split[2]); i > 0; i--)
        compatibleWith.add(base + "." + i)
} else compatibleWith.add(rootProject.minecraft_version)

allprojects {
    project.ext['moduleId'] = 'unnamed'
    project.ext['moduleName'] = ''
    project.ext['mod_license'] = project.mod_license

    tasks.withType(ProcessResources).configureEach {
        doFirst {
            var props = [
                    "mod_page",
                    "mod_sources",
//                    "mod_issues"
            ].collectEntries {
                [it, project.properties[it]]
            }

            props.putAll([
                    'moduleId': project.ext['moduleId'],
                    'moduleName': project.ext['moduleName'],
                    'mod_license': project.ext['mod_license'],
                    'version': project.version
            ])

            filesMatching("fabric.mod.json") {
                expand props
            }
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings "net.fabricmc:yarn:${rootProject.minecraft_version}${rootProject.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modImplementation include("me.lonefelidae16:groominglib:${rootProject.groom_version}")

    implementation include(project(path: 'shared', configuration: 'namedElements'))
    implementation include(project(path: 'versioned:sc1.21', configuration: 'namedElements'))
    implementation include(project(path: 'versioned:sc1.20.5', configuration: 'namedElements'))
    implementation include(project(path: 'versioned:sc1.20.3', configuration: 'namedElements'))
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release.set(targetJdk)
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.toVersion(targetJdk)
    targetCompatibility = JavaVersion.toVersion(targetJdk)
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archives_base_name}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        maven {
            url = "https://repo.stashy.dev"
            credentials {
                username = project.hasProperty("publish_username") ? project.publish_username : ""
                password = project.hasProperty("publish_password") ? project.publish_password : ""
            }
        }
    }
}
